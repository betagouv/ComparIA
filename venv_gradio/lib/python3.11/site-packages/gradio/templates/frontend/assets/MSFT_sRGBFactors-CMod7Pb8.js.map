{"version":3,"file":"MSFT_sRGBFactors-CMod7Pb8.js","sources":["../../../../node_modules/.pnpm/@babylonjs+loaders@8.2.0_@babylonjs+core@8.2.0_babylonjs-gltf2interface@7.25.2/node_modules/@babylonjs/loaders/glTF/2.0/Extensions/MSFT_sRGBFactors.js"],"sourcesContent":["import { PBRMaterial } from \"@babylonjs/core/Materials/PBR/pbrMaterial.js\";\nimport { GLTFLoader } from \"../glTFLoader.js\";\nimport { registerGLTFExtension, unregisterGLTFExtension } from \"../glTFLoaderExtensionRegistry.js\";\nconst NAME = \"MSFT_sRGBFactors\";\n/** @internal */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class MSFT_sRGBFactors {\n    /** @internal */\n    constructor(loader) {\n        /** @internal */\n        this.name = NAME;\n        this._loader = loader;\n        this.enabled = this._loader.isExtensionUsed(NAME);\n    }\n    /** @internal */\n    dispose() {\n        this._loader = null;\n    }\n    /** @internal */\n    loadMaterialPropertiesAsync(context, material, babylonMaterial) {\n        return GLTFLoader.LoadExtraAsync(context, material, this.name, (extraContext, extra) => {\n            if (extra) {\n                if (!(babylonMaterial instanceof PBRMaterial)) {\n                    throw new Error(`${extraContext}: Material type not supported`);\n                }\n                const promise = this._loader.loadMaterialPropertiesAsync(context, material, babylonMaterial);\n                const useExactSrgbConversions = babylonMaterial.getScene().getEngine().useExactSrgbConversions;\n                if (!babylonMaterial.albedoTexture) {\n                    babylonMaterial.albedoColor.toLinearSpaceToRef(babylonMaterial.albedoColor, useExactSrgbConversions);\n                }\n                if (!babylonMaterial.reflectivityTexture) {\n                    babylonMaterial.reflectivityColor.toLinearSpaceToRef(babylonMaterial.reflectivityColor, useExactSrgbConversions);\n                }\n                return promise;\n            }\n            return null;\n        });\n    }\n}\nunregisterGLTFExtension(NAME);\nregisterGLTFExtension(NAME, true, (loader) => new MSFT_sRGBFactors(loader));\n//# sourceMappingURL=MSFT_sRGBFactors.js.map"],"names":["NAME","MSFT_sRGBFactors","loader","context","material","babylonMaterial","GLTFLoader","extraContext","extra","PBRMaterial","promise","useExactSrgbConversions","unregisterGLTFExtension","registerGLTFExtension"],"mappings":"gTAGA,MAAMA,EAAO,mBAGN,MAAMC,CAAiB,CAE1B,YAAYC,EAAQ,CAEhB,KAAK,KAAOF,EACZ,KAAK,QAAUE,EACf,KAAK,QAAU,KAAK,QAAQ,gBAAgBF,CAAI,CACnD,CAED,SAAU,CACN,KAAK,QAAU,IAClB,CAED,4BAA4BG,EAASC,EAAUC,EAAiB,CAC5D,OAAOC,EAAW,eAAeH,EAASC,EAAU,KAAK,KAAM,CAACG,EAAcC,IAAU,CACpF,GAAIA,EAAO,CACP,GAAI,EAAEH,aAA2BI,GAC7B,MAAM,IAAI,MAAM,GAAGF,CAAY,+BAA+B,EAElE,MAAMG,EAAU,KAAK,QAAQ,4BAA4BP,EAASC,EAAUC,CAAe,EACrFM,EAA0BN,EAAgB,SAAU,EAAC,UAAS,EAAG,wBACvE,OAAKA,EAAgB,eACjBA,EAAgB,YAAY,mBAAmBA,EAAgB,YAAaM,CAAuB,EAElGN,EAAgB,qBACjBA,EAAgB,kBAAkB,mBAAmBA,EAAgB,kBAAmBM,CAAuB,EAE5GD,CACV,CACD,OAAO,IACnB,CAAS,CACJ,CACL,CACAE,EAAwBZ,CAAI,EAC5Ba,EAAsBb,EAAM,GAAOE,GAAW,IAAID,EAAiBC,CAAM,CAAC","x_google_ignoreList":[0]}